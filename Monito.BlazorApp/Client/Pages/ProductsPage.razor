@page "/products"

@inject IProductService ProductService

<h3>Products</h3>

@if (showEditForm && editingProduct != null)
{
    <h4>@(editingProduct.Id == 0 ? "Add New Product" : "Edit Product")</h4>
    <form @onsubmit="SaveProduct">
        <div class="form-group">
            <label>Name:</label>
            <input class="form-control" @bind="editingProduct.Name" />
        </div>
        <div class="form-group">
            <label>Code:</label>
            <input class="form-control" @bind="editingProduct.Code" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </form>
}
else if (selectedProductId != -1)
{
    <h4>Varieties of Selected Product</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Code</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (varieties != null)
            {
                @foreach (var variety in varieties)
                {
                    <tr>
                        <td>@variety.Name</td>
                        <td>@variety.Code</td>
                        <td>
                            <button class="btn btn-link" @onclick="() => OpenEditVarietyForm(variety)">Edit</button>
                            <button class="btn btn-link text-danger" @onclick="() => DeleteVariety(variety)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="OpenAddVarietyForm">Add New Variety</button>
}
else
{
    <button class="btn btn-primary" @onclick="OpenAddForm">Add New Product</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Code</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Code</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => OpenEditForm(product)">Edit</button>
                        <button class="btn btn-link text-danger" @onclick="() => DeleteProduct(product)">Delete</button>
                        <button class="btn btn-link" @onclick="() => ShowVarieties(product.Id)">Show Varieties</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Product> products;
    private IEnumerable<Variety> varieties;
    private Product editingProduct;
    private bool showEditForm = false;
    private int selectedProductId = -1;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        products = await ProductService.GetProducts();
    }

    private void OpenAddForm()
    {
        editingProduct = new Product();
        showEditForm = true;
    }

    private async Task SaveProduct()
    {
        if (editingProduct.Id == 0)
        {
            await ProductService.CreateProduct(editingProduct);
        }
        else
        {
            await ProductService.UpdateProduct(editingProduct);
        }

        editingProduct = null;
        showEditForm = false;
        await LoadData();
    }

    private void OpenEditForm(Product product)
    {
        editingProduct = new Product
            {
                Id = product.Id,
                Code = product.Code,
                Name = product.Name
            };
        showEditForm = true;
    }

    private async Task DeleteProduct(Product product)
    {
        await ProductService.DeleteProduct(product);
        await LoadData();
    }

    private async Task<IEnumerable<Variety>> GetVarietiesBySelectedProductId()
    {
        if (selectedProductId != -1)
        {
            return await ProductService.GetVarietiesByProductId(selectedProductId);
        }
        return Enumerable.Empty<Variety>();
    }

    private void OpenEditVarietyForm(Variety variety)
    {
        // Implementa la logica per aprire il form di modifica della varietà
    }

    private async Task DeleteVariety(Variety variety)
    {
        throw new NotImplementedException();
        //await ProductService.DeleteVariety(variety);
        //await LoadData();
    }

    private void OpenAddVarietyForm()
    {
        // Implementa la logica per aprire il form di aggiunta di una nuova varietà
    }

    private void ShowVarieties(int productId)
    {
        selectedProductId = productId;
        LoadVarieties(selectedProductId);
    }

    private async Task LoadVarieties(int productId)
    {
        varieties = await ProductService.GetVarietiesByProductId(productId);
    }

    private void CancelEdit()
    {
        editingProduct = null;
        showEditForm = false;
    }
}
